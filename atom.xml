<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ac-automation27.github.io</id>
    <title>AC-Automation&apos;s blog</title>
    <updated>2020-03-08T14:21:46.547Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ac-automation27.github.io"/>
    <link rel="self" href="https://ac-automation27.github.io/atom.xml"/>
    <logo>https://ac-automation27.github.io/images/avatar.png</logo>
    <icon>https://ac-automation27.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, AC-Automation&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[题解 CF486C 【Palindrome Transformation】]]></title>
        <id>https://ac-automation27.github.io/post/ti-jie-cf486c-palindrome-transformation</id>
        <link href="https://ac-automation27.github.io/post/ti-jie-cf486c-palindrome-transformation">
        </link>
        <updated>2020-02-28T11:08:55.000Z</updated>
        <content type="html"><![CDATA[<p>貌似现在只有一篇<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的题解？给一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的吧。</p>
<p>我们先预处理出来每一个字符要想和其对应位置的字符相同，所需的操作次数。<br>
以样例为例子：</p>
<pre><code>aeabcaez
10011001
</code></pre>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext mathvariant="monospace">a</mtext></mrow><annotation encoding="application/x-tex">\texttt{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord text"><span class="mord texttt">a</span></span></span></span></span>变成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext mathvariant="monospace">z</mtext></mrow><annotation encoding="application/x-tex">\texttt{z}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord text"><span class="mord texttt">z</span></span></span></span></span>要1步，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext mathvariant="monospace">b</mtext></mrow><annotation encoding="application/x-tex">\texttt{b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61111em;vertical-align:0em;"></span><span class="mord text"><span class="mord texttt">b</span></span></span></span></span>变成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext mathvariant="monospace">c</mtext></mrow><annotation encoding="application/x-tex">\texttt{c}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord text"><span class="mord texttt">c</span></span></span></span></span>要1步<br>
然后分类讨论k的位置即可，详见代码注释</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cmath&gt;
#include&lt;cstring&gt;
using namespace std;
int c[100005]; 
int f(char ch1,char ch2){
	int x=ch1-96,y=ch2-96;
	return min(abs(x-y),min(abs(x+26-y),abs(x-y-26)));
}//预处理
int main(){
	int n,k,ans=0;
	string s;
	cin&gt;&gt;n&gt;&gt;k&gt;&gt;s;
	k--;
	for(int i=0;i&lt;n;i++){
		c[i]=f(s[i],s[n-i-1]);
	}
	int L=-1,R=-1;
	if(k&lt;n/2){//k在前半部分
		for(int i=0;i+i&lt;=n;i++)if(c[i]){L=i;break;}
		for(int i=n/2-1;i&gt;=0;i--)if(c[i]){R=i;break;}//确认要经过的范围
		if(L==R&amp;&amp;L==-1){
			cout&lt;&lt;0;
			return 0;
		}//直接回文串的话处理掉就行
		if(k&lt;=L){
			ans+=R-k;
		}//k在要经过范围左侧
		else if(k&gt;=R){
			ans+=k-L;
		}//右侧
		else{
			ans+=R-L+min(k-L,R-k); 
		}//内部
		for(int i=L;i&lt;=R;i++){
			ans+=c[i];
		}
		cout&lt;&lt;ans;
	}
	else{//k在后半部分，其他同上
		for(int i=n/2;i&lt;=n;i++)if(c[i]){L=i;break;}
		for(int i=n;i&gt;=n/2;i--)if(c[i]){R=i;break;}
		if(L==R&amp;&amp;L==-1){
			cout&lt;&lt;0;
			return 0;
		}
		if(k&lt;=L){
			ans+=R-k;
		}
		else if(k&gt;=R){
			ans+=k-L;
		}
		else{
			ans+=R-L+min(k-L,R-k); 
		}
		for(int i=L;i&lt;=R;i++){
			ans+=c[i];
		}
		cout&lt;&lt;ans;
		
	}
	return 0;
}
</code></pre>
<p>很明显，时间复杂度是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[刷题日志]]></title>
        <id>https://ac-automation27.github.io/post/shua-ti-ri-zhi</id>
        <link href="https://ac-automation27.github.io/post/shua-ti-ri-zhi">
        </link>
        <updated>2020-02-26T12:58:40.000Z</updated>
        <content type="html"><![CDATA[<p>20-02-24 CF466C <a href="https://ac-automation27.github.io/post/dai-ma-cang-ku-cf466c/">代码</a><br>
20-02-24 CF474D <a href="https://ac-automation27.github.io/post/dai-ma-cang-ku-cf474d/">代码</a><br>
20-02-25 CF546D <a href="https://ac-automation27.github.io/post/dai-ma-cang-ku-cf546d/">代码</a><br>
20-02-26 CF372A <a href="https://ac-automation27.github.io/post/dai-ma-cang-ku-cf372a/">代码</a><br>
20-02-27 P6136 <a href="https://ac-automation27.github.io/post/dai-ma-cang-ku-p6136/">代码</a><br>
20-02-27 P1351 <a href="https://ac-automation27.github.io/post/dai-ma-cang-ku-p1351/">代码</a><br>
20-02-28 CF486C <a href="https://ac-automation27.github.io/post/dai-ma-cang-ku-cf486c/">代码</a><br>
20-02-28 SP2713 <a href="https://ac-automation27.github.io/post/dai-ma-cang-ku-sp2713/">代码</a><br>
20-02-29 P3467 <a href="https://ac-automation27.github.io/post/dai-ma-cang-ku-p3467/">代码</a><br>
20-02-29 P3385 <a href="https://ac-automation27.github.io/post/dai-ma-cang-ku-p3385/">代码</a><br>
20-03-01 P2572 <a href="https://ac-automation27.github.io/post/dai-ma-cang-ku-p2572/">代码</a><br>
20-03-01 P5960 <a href="https://ac-automation27.github.io/post/dai-ma-cang-ku-p5960/">代码</a><br>
20-03-01 P2286 <a href="https://ac-automation27.github.io/post/dai-ma-cang-ku-p2286/">代码</a><br>
20-03-02 P1993 <a href="https://ac-automation27.github.io/post/dai-ma-cang-ku-p1993/">代码</a><br>
20-03-02 P3275 <a href="https://ac-automation27.github.io/post/dai-ma-cang-ku-p3275/">代码</a><br>
20-03-03 P4878 <a href="https://ac-automation27.github.io/post/dai-ma-cang-ku-p3275/">代码</a><br>
20-03-04 P1503 <a href="https://ac-automation27.github.io/post/dai-ma-cang-ku-p1503/">代码</a><br>
20-03-05 P2341 <a href="https://ac-automation27.github.io/post/dai-ma-cang-ku-p2341/">代码</a><br>
20-03-06 P2812&amp;2746 <a href="https://ac-automation27.github.io/post/dai-ma-cang-ku-p2812andp2746/">代码</a><br>
20-03-07 P1726 <a href="https://ac-automation27.github.io/post/dai-ma-cang-ku-p1726/">代码</a><br>
20-03-08 P3258 <a href="https://ac-automation27.github.io/post/dai-ma-cang-ku-p3258/">代码</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 CF466C 【Number of Ways】]]></title>
        <id>https://ac-automation27.github.io/post/ti-jie-cf466c-number-of-ways</id>
        <link href="https://ac-automation27.github.io/post/ti-jie-cf466c-number-of-ways">
        </link>
        <updated>2020-02-24T13:15:50.000Z</updated>
        <content type="html"><![CDATA[<p>我们有一个数组 a。我们要将其分成三份，使得这三份的和相等。我们用 kk 代表每一份的和。</p>
<p>很明显，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的枚举一定会超时。这里我们考虑分别枚举之后统计答案。</p>
<p>考虑记录 bool 数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><msub><mn>1</mn><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">b1_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">b</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><msub><mn>2</mn><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">b2_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">b</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p>
<p>当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></msubsup><msub><mi>a</mi><mi>k</mi></msub><mo>=</mo><mi>k</mi><mi>k</mi></mrow><annotation encoding="application/x-tex">\sum_{k=1}^ia_k=kk</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.264274em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.964564em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>时，令<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><msub><mn>1</mn><mi>i</mi></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">b1_i=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">b</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，否则，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><msub><mn>1</mn><mi>i</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">b1_i=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">b</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。</p>
<p>当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mi>i</mi></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>k</mi></msub><mo>=</mo><mi>k</mi><mi>k</mi></mrow><annotation encoding="application/x-tex">\sum_{k=i}^na_k=kk</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>时，令<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><msub><mn>2</mn><mi>i</mi></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">b2_i=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">b</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，否则，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><msub><mn>2</mn><mi>i</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">b2_i=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">b</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。</p>
<p>这样的话，我们就可以统计答案了！对于每个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><msub><mn>2</mn><mi>i</mi></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">b2_i=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">b</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，可以与其对应的分割方案数量即为在 i-1 左侧的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><msub><mn>1</mn><mi>i</mi></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">b1_i=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">b</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>的数量。前缀和维护即可。</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#define int long long
using namespace std;
int a[500005];
bool b1[500005],b2[500005];
int c[500005];
signed main(){
	int n,sum=0,kk;
	cin&gt;&gt;n;
	for(int i=1;i&lt;=n;i++)cin&gt;&gt;a[i],sum+=a[i];
	if(sum%3!=0){
		cout&lt;&lt;0;
		return 0;
	}//特判出局
	kk=sum/3;
	sum=0;
	for(int i=1;i&lt;=n;i++){
		sum+=a[i];
		if(sum==kk)b1[i]=1;
	}//统计b1数组
	sum=0;
	for(int i=n;i&gt;0;i--){
		sum+=a[i];
		if(sum==kk)b2[i]=1;
	}//统计b2数组
	for(int i=1;i&lt;=n;i++){
		c[i]=c[i-1]+b1[i];
	}//前缀和
	int ans=0;
	for(int i=3;i&lt;=n;i++){
		ans+=b2[i]*c[i-2];
	}//统计答案
	cout&lt;&lt;ans;
	return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 CF27C 【Unordered Subsequence】]]></title>
        <id>https://ac-automation27.github.io/post/ti-jie-cf27c-unordered-subsequence</id>
        <link href="https://ac-automation27.github.io/post/ti-jie-cf27c-unordered-subsequence">
        </link>
        <updated>2020-02-13T04:27:05.000Z</updated>
        <content type="html"><![CDATA[<p>这道题的翻译有问题，要找到的是最短的非有序子序列。</p>
<p>很明显，长度 &lt; 3 的子序列不可能是非有序的，这样的话我们只需要找到长度为三，且非有序的子序列就行了。因为如果我们有一个长度为4的非有序子序列，我们一定可以删掉其中的一个元素，并保持它的非有序性。</p>
<p>于是，题目简化为找到一个长度为3的非有序子序列。我们可以枚举这个子序列的中间点，然后判断是否可以以它为中间点找到非有序子序列。这可以用前缀最大最小值，后缀最大最小值来完成。<br>
code: 😄</p>
<pre><code>#include&lt;iostream&gt;
using namespace std;
int a[100005];
struct node{
	int premax,premin,sufmax,sufmin;
}q[100005];//前后缀最大最小值
int main(){
	int n;
	cin&gt;&gt;n;
	for(int i=1;i&lt;=n;i++)cin&gt;&gt;a[i];
	a[n+2]=999999999;
	a[n+1]=-999999999;
	q[0].premin=q[n+1].sufmin=n+2;
	q[0].premax=q[n+1].sufmax=n+1;
	for(int i=1;i&lt;=n;i++){
		q[i].premax=(a[i]&gt;a[q[i-1].premax])?i:q[i-1].premax;
		q[i].premin=(a[i]&lt;a[q[i-1].premin])?i:q[i-1].premin;
	}
	for(int i=n;i&gt;0;i--){
		q[i].sufmax=(a[i]&gt;a[q[i+1].sufmax])?i:q[i+1].sufmax;
		q[i].sufmin=(a[i]&lt;a[q[i+1].sufmin])?i:q[i+1].sufmin;
	}//预处理
	for(int i=2;i&lt;n;i++){
		if(a[q[i-1].premin]&lt;a[i]&amp;&amp;a[q[i+1].sufmin]&lt;a[i]){
			cout&lt;&lt;3&lt;&lt;endl&lt;&lt;q[i-1].premin&lt;&lt;' '&lt;&lt;i&lt;&lt;' '&lt;&lt;q[i+1].sufmin;
			return 0;
		}
		if(a[q[i-1].premax]&gt;a[i]&amp;&amp;a[q[i+1].sufmax]&gt;a[i]){
			cout&lt;&lt;3&lt;&lt;endl&lt;&lt;q[i-1].premax&lt;&lt;' '&lt;&lt;i&lt;&lt;' '&lt;&lt;q[i+1].sufmax;
			return 0;
		}
	}
    //如果对于一个中间点，它的左边最小和右边最小都比它小，或者它的左边最大和右边最大都比它大，那么它就可以构成非有序子序列
	cout&lt;&lt;0;
	return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 CF873B 【Balanced Substring】]]></title>
        <id>https://ac-automation27.github.io/post/ti-jie-cf873b-balanced-substring</id>
        <link href="https://ac-automation27.github.io/post/ti-jie-cf873b-balanced-substring">
        </link>
        <updated>2020-02-10T11:43:51.000Z</updated>
        <content type="html"><![CDATA[<p>题意：给出一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>长度的01串，其中含有相同0，1个数的子串被称为“平衡串”，问最长的平衡串的长度。</p>
<p>我们可以先将0改变成-1，这样的话，新串中和为0的子串即为原串中“平衡串”。</p>
<p>考虑枚举某一个端点，并判断是否存在可行的另一个端点。在这道题中，我们枚举右端点。</p>
<p>让我们维护一个前缀和数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>u</mi><mi>m</mi><mo>[</mo><mi>i</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">sum[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>。对于某一个右端点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>，如果存在一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi><mo>∈</mo><mo>[</mo><mn>1</mn><mo separator="true">,</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">j\in[1,k-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>，使得<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>u</mi><mi>m</mi><mo>[</mo><mi>j</mi><mo>]</mo><mo>=</mo><mi>s</mi><mi>u</mi><mi>m</mi><mo>[</mo><mi>k</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">sum[j]=sum[k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span>，那么<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>j</mi><mo>+</mo><mn>1</mn></mrow><mi>k</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\sum_{i=j+1}^ka_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.424826em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9890079999999999em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>就一定等于0。这样的话，就形成了一个平衡串。我们可以用一个桶来记录前缀和数组之前是否存在过某个值，就可以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>判断一个右端点是否对应一个左端点，即可通过本题。</p>
<pre><code>#include&lt;iostream&gt;
using namespace std;
int book[200005];//桶
int main(){
	int n,sum=0,ans=0;
	cin&gt;&gt;n;
	string s;
	cin&gt;&gt;s;
	for(int i=1;i&lt;=n;i++){
		if(s[i-1]=='1')sum++;
		else sum--;//sum记录前缀和
		if(sum==0)ans=max(ans,i); //有可能平衡串出现在最开始的某一个串
		if(book[sum+100000]==0)book[sum+100000]=i;
		else ans=max(ans,i-book[sum+100000]);
        //注意：1.桶内如果已经有了元素，那么不要改变它，因为左端点越靠左越好
        //2.因为前缀和有可能&lt;0，那么我们需要整体移动桶的下标
	}
	cout&lt;&lt;ans;
	return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 CF902B 【Coloring a Tree】 ]]></title>
        <id>https://ac-automation27.github.io/post/ti-jie-cf902b-coloring-a-tree</id>
        <link href="https://ac-automation27.github.io/post/ti-jie-cf902b-coloring-a-tree">
        </link>
        <updated>2020-02-08T05:52:04.000Z</updated>
        <content type="html"><![CDATA[<p>题面：一颗树，每次可以选择一个子树染成同一个颜色，求染成目标状态的最小操作次数。</p>
<p>首先，如果对于一个子树，这个子树的根节点需要被染色，那么这个根节点一定要先被染色，然后他的孩子们才会被染色。因为给这个根节点染色的时候，它下面的孩子们同时也会被染色，若是之前就给他的孩子们染色，那么这样的染色是会被浪费掉的。</p>
<p>其次，对于两个兄弟子树，他们染色的先后顺序是不影响染色的次数的。</p>
<p>知道的这两点之后，就有了一种很容易设计出的算法了。从根节点开始遍历整棵树，如果某个子树的根节点需要被染色，则ans++，并将这个子树染成这种颜色（打标记），然后再遍历它的所有孩子，重复以上操作。</p>
<p>代码（注释应该比较清晰）</p>
<pre><code>#include&lt;iostream&gt;
using namespace std;
struct edge{
	int v,nxt;
}a[20005];
int head[10005],clr[10005],cnt=0;
void add_edge(int u,int v){
	cnt++;
	a[cnt].v=v;
	a[cnt].nxt=head[u];
	head[u]=cnt;
}//链式前向星
int dfs(int u,int color,int fa){//color代表它这个子树之前被染成什么颜色了，u是节点编号
	int ans=0;
	if(color!=clr[u])ans++;//需要被染色一次
	for(int i=head[u];i;i=a[i].nxt){
		if(a[i].v==fa)continue;
		ans+=dfs(a[i].v,clr[u],u);//递归下去，此时这个子树一定被染成了clr[u]这个颜色，因为如果没有将当前节点的子树染色，则这个子树一定在之前被染过一次色
	}
	return ans;
}
int main(){
	int n,v;
	cin&gt;&gt;n;
	for(int i=2;i&lt;=n;i++){
		cin&gt;&gt;v;
		add_edge(i,v);
		add_edge(v,i);
	}
	for(int i=1;i&lt;=n;i++)cin&gt;&gt;clr[i];
	cout&lt;&lt;dfs(1,0,-1);
	return 0;
}


</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 CF816B 【Karen and Coffee】]]></title>
        <id>https://ac-automation27.github.io/post/ti-jie-cf816b-karen-and-coffee</id>
        <link href="https://ac-automation27.github.io/post/ti-jie-cf816b-karen-and-coffee">
        </link>
        <updated>2020-02-06T07:58:48.000Z</updated>
        <content type="html"><![CDATA[<p>思路：用差分来维护每种温度被食谱的认可度，再用前缀和处理询问（本来以为要用线段树维护，后来发现询问都在最后，于是写的差分）。</p>
<p>有关差分的介绍请看这里：<a href="https://rpdreamer.blog.luogu.org/ci-fen-and-shu-shang-ci-fen">差分数组&amp;树上差分</a></p>
<p><s>前缀和不用多讲了吧</s></p>
<p>最后是代码：</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
using namespace std;
int a[200005],b[200005],sum[200005];
int main()
{
	int n,k,q,l,r;
	cin&gt;&gt;n&gt;&gt;k&gt;&gt;q;
	for(int i=0;i&lt;n;i++)
	{
		cin&gt;&gt;l&gt;&gt;r;
		b[l]++;
		b[r+1]--;
	}//差分
	int sum1=0,sum2=0;
	for(int i=1;i&lt;=200000;i++)
	{
		sum1+=b[i];
		a[i]=sum1;
		if(a[i]&gt;=k)
			sum2++;
		sum[i]=sum2;
	}//计算前缀和
	for(int i=0;i&lt;q;i++)
	{
		cin&gt;&gt;l&gt;&gt;r;
		cout&lt;&lt;sum[r]-sum[l-1]&lt;&lt;endl;
	}//处理询问
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 CF1097B 【Petr and a Combination Lock】]]></title>
        <id>https://ac-automation27.github.io/post/ti-jie-cf1097b-petr-and-a-combination-lock</id>
        <link href="https://ac-automation27.github.io/post/ti-jie-cf1097b-petr-and-a-combination-lock">
        </link>
        <updated>2020-02-06T07:58:28.000Z</updated>
        <content type="html"><![CDATA[<h4 id="这道题一看数据规模就知道是爆搜">这道题一看数据规模就知道是爆搜</h4>
<p>是一道还不错的DFS练习题</p>
<p>只要每一次尝试顺时针或逆时针转，转完之后计算是否转回0°就好了</p>
<h3 id="注意如果逆时针转不能直接减去度数会变成负数">注意如果逆时针转，不能直接减去度数，会变成负数。</h3>
<p>代码：</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
using namespace std;
bool flag=true;//有没有得到解
int a[20];//转动度数
void dfs(int nd,int n){
	if(n==-1){
		if(nd%360==0)
			flag=false;
		return;
	}//判断是否转回0°
	if(flag)
		dfs(nd+a[n],n-1);//向下搜
	if(flag)
		dfs(nd+360-a[n],n-1);//向下搜
}
int main()
{
	int n;
	cin&gt;&gt;n;
	for(int i=0;i&lt;n;i++)
		cin&gt;&gt;a[i];//输入
	dfs(0,n-1);//递归
	if(flag)
		cout&lt;&lt;&quot;NO\n&quot;;
	else
		cout&lt;&lt;&quot;YES\n&quot;;//输出
	return 0;
}
//个人认为代码可读性还是可以的吧

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P4939 【Agent2】]]></title>
        <id>https://ac-automation27.github.io/post/ti-jie-p4939-agent2</id>
        <link href="https://ac-automation27.github.io/post/ti-jie-p4939-agent2">
        </link>
        <updated>2020-02-06T07:56:40.000Z</updated>
        <content type="html"><![CDATA[<p>先看题目描述，总结起来就是：</p>
<h4 id="1-区间修改">1. 区间修改</h4>
<h4 id="2-单点查询">2. 单点查询</h4>
<p>于是：</p>
<h2 id="标准的线段树-树状数组题目">标准的线段树、树状数组题目。</h2>
<p>墙裂推荐树状数组~~（只要能用）~~，码量小，空间和时间都比线段树优</p>
<h4 id="所以这里只讲树状数组">所以，这里只讲树状数组</h4>
<p>这里的树状数组采用了差分和前缀和的思想，利用树状数组维护差分数组的前缀和（不懂树状数组的出门左转<a href="https://www.luogu.org/problemnew/solution/P3374">这里</a>。<s>话说会树状数组的还看题解干嘛</s>）</p>
<p>久违的放代码时间：</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
using namespace std;
int n,m;
long long c[100000005];
inline int lowbit(int x){return x&amp;(-x);}//树状数组的标志
void add(int x,int t){//单点加（为什么要t看后面）
	while(x&lt;=n){
		c[x]+=t;
		x+=lowbit(x);
	}
}
long long sum(int x){//求和
	long long ret=0;
	while(x&gt;0){
		ret+=c[x];
		x-=lowbit(x);
	}
	return ret;
}
int main()
{
	ios::sync_with_stdio(false);
	cin&gt;&gt;n&gt;&gt;m;
	int opt,x,y;
	for(int i=0;i&lt;m;i++){
		cin&gt;&gt;opt;
		if(!opt){
			cin&gt;&gt;x&gt;&gt;y;
			add(x,1);
			add(y+1,-1);//差分，用到上面的t了~
		}
		else{
			cin&gt;&gt;x;
			cout&lt;&lt;sum(x)&lt;&lt;endl;
		}
	}
	return 0;
}//完结撒花！

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P4346 【[CERC2015]ASCII Addition】]]></title>
        <id>https://ac-automation27.github.io/post/ti-jie-p4346-cerc2015ascii-addition</id>
        <link href="https://ac-automation27.github.io/post/ti-jie-p4346-cerc2015ascii-addition">
        </link>
        <updated>2020-02-06T07:55:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>不要被题目的难度标签所迷惑	<s>——鲁迅</s></p>
<h2 id="思路解题方式">思路（解题方式）</h2>
<ol>
<li>将字符串读入并处理成整型</li>
<li>将答案用规定方式输出</li>
</ol>
<p>思路非常清晰的一道题，只是一个轻量级模拟而已（什么？不算轻量级？去看看<a href="https://www.luogu.org/problemnew/show/P3693">琪露诺的冰雪小屋</a>和<a href="https://www.luogu.org/problemnew/show/P2482">猪国杀</a>就知道这题是多么轻量级的一个模拟了）</p>
<h2 id="小技巧">小技巧</h2>
<p>代码本身难度不大，可以运用一些小技巧来减少码量及思维难度</p>
<ol>
<li>用数组存下每一个数字的表示方式，方便比对</li>
<li>可以将代码多分成几个函数来实现，方便查错及梳理思路</li>
</ol>
<h2 id="然后就是代码了">然后就是代码了</h2>
<p>应该不需要太多注释吧，思路已经很清楚了</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
using namespace std;
#define For(i,l,r) for(int i=l;i&lt;r;i++)//减少码量
string a[7];//存算式
int ans[30];//演算出的结果按位存在此数组里
long long add1=0,add2=0;//两个加数
string n[11][7]={&quot;xxxxx&quot;,&quot;x...x&quot;,&quot;x...x&quot;,&quot;x...x&quot;,&quot;x...x&quot;,&quot;x...x&quot;,&quot;xxxxx&quot;,
		 &quot;....x&quot;,&quot;....x&quot;,&quot;....x&quot;,&quot;....x&quot;,&quot;....x&quot;,&quot;....x&quot;,&quot;....x&quot;,
		 &quot;xxxxx&quot;,&quot;....x&quot;,&quot;....x&quot;,&quot;xxxxx&quot;,&quot;x....&quot;,&quot;x....&quot;,&quot;xxxxx&quot;,
		 &quot;xxxxx&quot;,&quot;....x&quot;,&quot;....x&quot;,&quot;xxxxx&quot;,&quot;....x&quot;,&quot;....x&quot;,&quot;xxxxx&quot;,
		 &quot;x...x&quot;,&quot;x...x&quot;,&quot;x...x&quot;,&quot;xxxxx&quot;,&quot;....x&quot;,&quot;....x&quot;,&quot;....x&quot;,
		 &quot;xxxxx&quot;,&quot;x....&quot;,&quot;x....&quot;,&quot;xxxxx&quot;,&quot;....x&quot;,&quot;....x&quot;,&quot;xxxxx&quot;,
		 &quot;xxxxx&quot;,&quot;x....&quot;,&quot;x....&quot;,&quot;xxxxx&quot;,&quot;x...x&quot;,&quot;x...x&quot;,&quot;xxxxx&quot;,
		 &quot;xxxxx&quot;,&quot;....x&quot;,&quot;....x&quot;,&quot;....x&quot;,&quot;....x&quot;,&quot;....x&quot;,&quot;....x&quot;,
		 &quot;xxxxx&quot;,&quot;x...x&quot;,&quot;x...x&quot;,&quot;xxxxx&quot;,&quot;x...x&quot;,&quot;x...x&quot;,&quot;xxxxx&quot;,
		 &quot;xxxxx&quot;,&quot;x...x&quot;,&quot;x...x&quot;,&quot;xxxxx&quot;,&quot;....x&quot;,&quot;....x&quot;,&quot;xxxxx&quot;,
		 &quot;.....&quot;,&quot;..x..&quot;,&quot;..x..&quot;,&quot;xxxxx&quot;,&quot;..x..&quot;,&quot;..x..&quot;,&quot;.....&quot;};//每一个数字的表示方式
bool equ(int x,int u){
	For(i,0,7)
		For(j,x,x+5)
			if(n[u][i][j-x]!=a[i][j])
				return false;	
	return true;
}//判断一个位置上的数字是否为u（u为10是代表加号）
int wt(int x){
	For(i,0,11)
		if(equ(x,i))
			return i;
}//判断一个位置上的数字（或加号）是什么
void print(int cnt){
	For(loop,0,7){
		for(int i=cnt-1;i&gt;=0;i--){
			For(j,0,5)cout&lt;&lt;n[ans[i]][loop][j];
			if(i)cout&lt;&lt;'.';
		}cout&lt;&lt;endl;
	}
}//输出答案
int main()
{
	For(i,0,7)cin&gt;&gt;a[i];
	int t;
	long long x;
	bool flag=true;
	for(int i=0;i&lt;a[0].size();i+=6){
		t=wt(i);
		if(t!=10&amp;&amp;flag)
			add1*=10,add1+=t;
		else if(t==10)
			flag=false;
		else
			add2*=10,add2+=t;
	}//识别出两个加数
	int cnt=0;
	x=add1+add2;
	while(x!=0){
		ans[cnt++]=x%10;
		x/=10;
	}//将答案按位分进ans数组中
	print(cnt);
	return 0;
}
</code></pre>
<p>代码只有62行，应该不算长吧~</p>
]]></content>
    </entry>
</feed>